Int16: type(internal.I16)

eq?[Bool, Int16]: fn(a: Int16, b: Int16) Bool {
    # TODO: implement comparison
}

compare_to[Int, Int16]: fn(a: Int16, b: Int16) Int {
    # TODO: implement comparison
}

lt?[Bool, Int16]: fn(a: Int16, b: Int16) Bool {
    # TODO: implement comparison
}

gt?[Bool, Int16]: fn(a: Int16, b: Int16) Bool {
    # TODO: implement comparison
}

lte?[Bool, Int16]: fn(a: Int16, b: Int16) Bool {
    # TODO: implement comparison
}

gte?[Bool, Int16]: fn(a: Int16, b: Int16) Bool {
    # TODO: implement comparison
}

add[Int16]: fn(a: Int16, b: Int16) Int16 {
    # TODO: implement addition
}

sub[Int16]: fn(a: Int16, b: Int16) Int16 {
    # TODO: implement subtraction
}

mul[Int16]: fn(a: Int16, b: Int16) Int16 {
    # TODO: implement multiplication
}

div[Int16]: fn(a: Int16, b: Int16) Int16 {
    # TODO: implement division
}

mod[Int16]: fn(a: Int16, b: Int16) Int16 {
    # TODO: implement modulus
}

pow[Int16]: fn(base: Int16, exponent: Int16) Int16 {
    # TODO: implement exponent
}

checked_add[Int16]: fn(a: Int16, b: Int16) !Int16 {
    # TODO: implement checked addition
}

checked_sub[Int16]: fn(a: Int16, b: Int16) !Int16 {
    # TODO: implement checked subtraction
}

checked_mul[Int16]: fn(a: Int16, b: Int16) !Int16 {
    # TODO: implement checked multiplication
}

checked_div[Int16]: fn(a: Int16, b: Int16) !Int16 {
    # TODO: implement checked division
}

checked_mod[Int16]: fn(a: Int16, b: Int16) !Int16 {
    # TODO: implement checked modulus
}

or[Int16]: fn(a: Int16, b: Int16) Int16 {
    # TODO: implement bitwise or
}

and[Int16]: fn(a: Int16, b: Int16) Int16 {
    # TODO: implement bitwise and
}

# shift left
shl[Int16]: fn(x: Int16, n: Int) Int16 {
    # TODO: implement bitwise shift left operation
}

# shift right
shr[Int16]: fn(x: Int16, n: Int) Int16 {
    # TODO: implement bitwise shift right operation    
}

xor[Int16]: fn(a: Int16, b: Int16) Int16 {
    # TODO: implement bitwise xor operation
}

not[Int16]: fn(x: Int16) Int16 {
    x.xor(-1)  # Equivalent to flipping all bits
}

bit_cast[Int16]: fn(a: Float16) Int16 {
    a.0
}

index[Bool, Int16]: fn(x: Int16, n: Int) !Bool {
    if n < 0 || n >= 16 { false } else { x.shr(n).and(1) == 1 }
}

with[Int16]: fn(x: Int16, n: Int, b: Bool) Int16 {
    if n < 0 || n >= 16 { x } # Out-of-bounds, return original value
    else if b { x.or(1.shl(n)) } # Set nth bit to 1
    else { x.and(1.shl(n).not()) } # Set nth bit to 0
}
