@type:implements SignedInt
@type:min -9_223_372_036_854_775_808
@type:max 9_223_372_036_854_775_807

Int64 = type(internal.I64)

eq?[Bool, Int64]: fn(a: Int64, b: Int64) Bool {
    # TODO: implement comparison
}

compare_to[Int, Int64]: fn(a: Int64, b: Int64) Int {
    # TODO: implement comparison
}

lt?[Bool, Int64]: fn(a: Int64, b: Int64) Bool {
    # TODO: implement comparison
}

gt?[Bool, Int64]: fn(a: Int64, b: Int64) Bool {
    # TODO: implement comparison
}

lte?[Bool, Int64]: fn(a: Int64, b: Int64) Bool {
    # TODO: implement comparison
}

gte?[Bool, Int64]: fn(a: Int64, b: Int64) Bool {
    # TODO: implement comparison
}

add[Int64]: fn(a: Int64, b: Int64) Int64 {
    # TODO: implement addition
}

sub[Int64]: fn(a: Int64, b: Int64) Int64 {
    # TODO: implement subtraction
}

mul[Int64]: fn(a: Int64, b: Int64) Int64 {
    # TODO: implement multiplication
}

div[Int64]: fn(a: Int64, b: Int64) Int64 {
    # TODO: implement division
}

mod[Int64]: fn(a: Int64, b: Int64) Int64 {
    # TODO: implement modulus
}

pow[Int64]: fn(base: Int64, exponent: Int64) Int64 {
    # TODO: implement exponent
}

checked_add[Int64]: fn(a: Int64, b: Int64) !Int64 {
    # TODO: implement checked addition
}

checked_sub[Int64]: fn(a: Int64, b: Int64) !Int64 {
    # TODO: implement checked subtraction
}

checked_mul[Int64]: fn(a: Int64, b: Int64) !Int64 {
    # TODO: implement checked multiplication
}

checked_div[Int64]: fn(a: Int64, b: Int64) !Int64 {
    # TODO: implement checked division
}

checked_mod[Int64]: fn(a: Int64, b: Int64) !Int64 {
    # TODO: implement checked modulus
}

or[Int64]: fn(a: Int64, b: Int64) Int64 {
    # TODO: implement bitwise or
}

and[Int64]: fn(a: Int64, b: Int64) Int64 {
    # TODO: implement bitwise and
}

# shift left
shl[Int64]: fn(x: Int64, n: Int) Int64 {
    # TODO: implement bitwise shift left operation
}

# shift right
shr[Int64]: fn(x: Int64, n: Int) Int64 {
    # TODO: implement bitwise shift right operation
}

xor[Int64]: fn(a: Int64, b: Int64) Int64 {
    # TODO: implement bitwise xor operation
}

not[Int64]: fn(x: Int64) Int64 {
    x.xor(-1)  # Equivalent to flipping all bits
}

bit_cast[Int64]: fn(a: Float64) Int64 {
    a.0
}

neg[Int64]: fn(x: Int64) Int64 {
     # TODO: negation
}

index[Bool, Int64]: fn(x: Int64, n: Int) Bool {
    if n < 0 || n >= 64 { false } else { x.shr(n).and(1) == 1 }
}

with[Int64]: fn(x: Int64, n: Int, b: Bool) Int64 {
    if n < 0 || n >= 64 { x } # Out-of-bounds, return original value
    else if b { x.or(1.shl(n)) } # Set nth bit to 1
    else { x.and(1.shl(n).not()) } # Set nth bit to 0
}
