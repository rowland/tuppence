{
    "name": "Tuppence",
    "scopeName": "source.tuppence",
    "fileTypes": ["tup"],
    "patterns": [
        {
            "include": "#comments"
        },
        {
            "include": "#strings"
        },
        {
            "include": "#keywords"
        },
        {
            "include": "#operators"
        },
        {
            "include": "#numbers"
        },
        {
            "include": "#types"
        },
        {
            "include": "#annotations"
        },
        {
            "include": "#functions"
        }
    ],
    "repository": {
        "comments": {
            "patterns": [
                {
                    "name": "comment.line.number-sign.tuppence",
                    "match": "#.*$"
                }
            ]
        },
        "strings": {
            "patterns": [
                {
                    "name": "string.quoted.double.tuppence",
                    "begin": "\"",
                    "end": "\"",
                    "patterns": [
                        {
                            "name": "constant.character.escape.tuppence",
                            "match": "\\\\([ntr'\"\\\\bfv0]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})"
                        },
                        {
                            "name": "meta.interpolation.tuppence",
                            "begin": "\\\\\\(",
                            "end": "\\)",
                            "patterns": [
                                {
                                    "include": "$self"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "string.quoted.raw.tuppence",
                    "begin": "`",
                    "end": "`",
                    "patterns": [
                        {
                            "match": "``",
                            "name": "constant.character.escape.tuppence"
                        }
                    ]
                },
                {
                    "name": "string.quoted.multiline.tuppence",
                    "begin": "```",
                    "end": "```",
                    "patterns": [
                        {
                            "include": "#interpolation"
                        },
                        {
                            "include": "#escapes"
                        }
                    ]
                },
                {
                    "name": "string.quoted.single.tuppence",
                    "begin": "'",
                    "end": "'",
                    "patterns": [
                        {
                            "include": "#escapes"
                        }
                    ]
                }
            ]
        },
        "escapes": {
            "patterns": [
                {
                    "name": "constant.character.escape.tuppence",
                    "match": "\\\\([ntr'\"\\\\bfv0]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})"
                }
            ]
        },
        "interpolation": {
            "patterns": [
                {
                    "name": "meta.interpolation.tuppence",
                    "begin": "\\\\\\(",
                    "end": "\\)",
                    "patterns": [
                        {
                            "include": "$self"
                        }
                    ]
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control.tuppence",
                    "match": "\\b(if|else|for|in|return|break|continue|try|try_continue|try_break|switch|union|enum|contract|type|mut|is|typeof|import|inline)\\b"
                },
                {
                    "name": "storage.modifier.tuppence",
                    "match": "\\b(fn|fx)\\b"
                },
                {
                    "name": "constant.language.tuppence",
                    "match": "\\b(true|false|error|any)\\b"
                }
            ]
        },
        "operators": {
            "patterns": [
                {
                    "name": "keyword.operator.arithmetic.tuppence",
                    "match": "\\+|-|\\*|/|%|\\^|\\?\\+|\\?-|\\?\\*|\\?/"
                },
                {
                    "name": "keyword.operator.logical.tuppence",
                    "match": "&&|\\|\\||!"
                },
                {
                    "name": "keyword.operator.comparison.tuppence",
                    "match": "==|!=|<|>|<=|>=|<=>"
                },
                {
                    "name": "keyword.operator.bitwise.tuppence",
                    "match": "&|\\||~|<<|>>"
                },
                {
                    "name": "keyword.operator.assignment.tuppence",
                    "match": "=|\\+=|-=|\\*=|/=|<<=|>>="
                },
                {
                    "name": "keyword.operator.range.tuppence",
                    "match": "\\.\\."
                }
            ]
        },
        "numbers": {
            "patterns": [
                {
                    "name": "constant.numeric.float.tuppence",
                    "match": "\\b\\d[\\d_]*\\.\\d[\\d_]*([eE][+-]?\\d+)?\\b"
                },
                {
                    "name": "constant.numeric.binary.tuppence",
                    "match": "\\b0b[01][01_]*\\b"
                },
                {
                    "name": "constant.numeric.hex.tuppence",
                    "match": "\\b0x[\\da-fA-F][\\da-fA-F_]*\\b"
                },
                {
                    "name": "constant.numeric.octal.tuppence",
                    "match": "\\b0o[0-7][0-7_]*\\b"
                },
                {
                    "name": "constant.numeric.decimal.tuppence",
                    "match": "\\b\\d[\\d_]*\\b"
                }
            ]
        },
        "types": {
            "patterns": [
                {
                    "name": "entity.name.type.tuppence",
                    "match": "\\b[A-Z][a-zA-Z0-9_]*\\b"
                }
            ]
        },
        "functions": {
            "patterns": [
                {
                    "name": "entity.name.function.tuppence",
                    "match": "\\b[a-z][a-zA-Z0-9_]*[!?]?\\b(?=\\s*\\()"
                }
            ]
        },
        "annotations": {
            "patterns": [
                {
                    "name": "entity.name.tag.tuppence",
                    "match": "@[a-zA-Z0-9_]+(?::[a-zA-Z0-9_]+)?"
                }
            ]
        }
    }
} 