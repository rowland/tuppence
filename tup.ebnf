add_sub_op      = "+" | "-" | "|" .

annotation      = "@" namespace ":" identifier annotation_value .

annotations     = [ annotation { annotation } ] .

argument        = expression .

arguments       = argument { "," argument } .

array_literal   = "[" [ array_members ] "]" .

array_members   = expression { "," expression } .

assignment      = assignment_lhs "=" [ "mut" ] expression .

assignment_lhs  = identifier { "," identifier } | "(" assignment_lhs ")" .

binary_expression = chained_expression

binary_literal  = "0b" ( "0" | "1" ) { "0" | "1" | "_" } .

block           = "{" { statement } expression "}" .

boolean_literal = "true" | "false" .

chained_expression = prec1_expression { "|>" prec1_expression } .

character       = (* valid UTF-8 codepoint *) .

comment         = "#" { not_eol } eol

decimal_digit   = "0"-"9" .

decimal_literal = decimal_digit { decimal_digit | "_" } .

eol             = ( "\r\n" | "\r" | "\n" ) .

escape_sequence = ( "\\n" | "\\t" | "\\\"" | "\\'" | "\\\\" | "\\r" | "\\b" | "\\f" | "\\v" | "\\0" ) .

exponent        = "e" [ "-" | "+" ] decimal_digit { decimal_digit } .

export_assignment = assignment_lhs ":" expression .

export_declaration = ( export_assignment | export_function_declaration | export_type_declaration ) .

export_function_declaration = function_declaration_lhs ":" function_type block .

export_function_type_declaration = function_type_declaration_lhs ":" function_type .

export_type_declaration = type_declaration_lhs ":" type_declaration_rhs .

expression      = binary_expression | unary_expression .

float_literal   = decimal_digit { decimal_digit | "_" } "." decimal_digit { decimal_digit | "_" } [ exponent ]
                | decimal_digit { decimal_digit | "_" } exponent .

for_block       = "{" { statement } [ expression ] "}" .

for_header      = assignment [ ";" expression [ ";" expression ] ] .

for_expression  = "for" [ for_header ] for_block .

function_call   = function_identifier "(" [ ( labeled_arguments | arguments [ "," labeled_arguments ] ) [ partial_application ] ] ")" .

function_declaration = function_declaration_lhs "=" function_type block .

function_declaration_lhs = function_identifier [ function_parameters ] .

function_identifier = lowercase_letter { letter | decimal_digit | "_" } [ "?" | "!" ] .

function_parameters = "[" [ identifier { "," identifier } ] "]" .

function_type   = "fn" "(" [ labeled_parameters | parameters ] ")" return_type .

function_type_declaration = function_type_declaration_lhs "=" function_type .

function_type_declaration_lhs = function_type_identifier [ function_parameters ] .

function_type_identifier = uppercase_letter { letter | decimal_digit | "_" } .

generic_type    = type_identifier type_argument_list .

hex_digit       = decimal_digit | "a"-"f" | "A"-"F" .

hexadecimal_literal = "0x" hex_digit { hex_digit | "-" } .

identifier      = ( letter | "_" ) { letter | decimal_digit | "_" } .

if_expression   = "if" expression block { "else" "if" expression block } [ "else" block ] .

index           = expression .

indexed_access  = expression "[" index { "," index } "]" .

integer_literal = binary_literal
                | hexadecimal_literal
                | octal_literal
                | decimal_literal .

interpolated_string_literal = '"' { unicode_escape_sequence | escape_sequence | interpolation | character - '"' } '"' .

interpolation   =  "\\(" expression ")"

labeled_argument = identifier ":" expression .

labeled_arguments = labeled_argument { "," ( labeled_argument ) } .

labeled_parameter = annotations identifier ":" parameter .

labeled_parameters = labeled_parameter { "," labeled_parameter } .

labeled_tuple_member = identifier ":" tuple_member .

labeled_tuple_members = labeled_tuple_member { "," labeled_tuple_member } .

labeled_tuple_type_member = annotations identifier ":" tuple_type_member .

labeled_tuple_type_members = labeled_tuple_type_member { "," labeled_tuple_type_member } .

letter          = "a"-"z" | "A"-"Z" .

literal         = number
                | boolean_literal
                | string_literal
                | interpolated_string_literal
                | raw_string_literal
                | tuple_literal
                | array_literal .

lowercase_letter = "a"-"z" .

member_access   = expression "." ( decimal_literal | identifier ) .

module          = { top_level_item } .

mul_div_op      = "*" | "/" | "%" | "&" | "<<" | ">>" .

namespace       = letter { letter | decimal_digit | "_" } .

nonzero_digit   = "1"-"9" .

not_eol         = character - "\n" - "\r" .

number          = float_literal | integer_literal .

octal_digit     = "0"-"7" .

octal_literal   = "0o" octal_digit { octal_digit } .

parameter       = annotations ( type | literal ) .

parameters      = parameter { "," parameter } .

partial_application = "," "*" .

pipeline_expression = expression "|>" expression .

prec1_expression = prec2_expression { "||" prec2_expression } .

prec2_expression = prec3_expression { "&&" prec3_expression } .

prec3_expression = prec4_expression { rel_op prec4_expression } .

prec4_expression = prec5_expression { add_sub_op prec5_expression } .

prec5_expression = prec6_expression { mul_div_op prec6_expression } .

prec6_expression = unary_expression { "^" unary_expression } .

primary_expression = literal
                | "(" expression ")"
                | block
                | if_expression
                | for_expression
                | function_call
                | return_expression
                | member_access
                | tuple_update_expression
                | indexed_access
                | identifier .

raw_string_literal = "`" { unicode_char - "`" } "`" .

rel_op          = "==" | "<" | ">" | "<=" | ">=" | "!=" .

return_expression = "return" expression .

return_type     = type .

statement       = ( assignment
                  | function_declaration
                  | type_declaration 
                  ) .

string_literal  = '"' { unicode_escape_sequence | escape_sequence | character - '"' } '"' .

top_level_item  = ( assignment
                  | function_declaration
                  | type_declaration
                  | export_declaration
                  ) .

tuple_literal   = "(" [ labeled_tuple_members | tuple_members ] ")" .

tuple_member    = expression

tuple_members   = tuple_member { "," tuple_member } .

tuple_type      = "(" [ labeled_tuple_type_members | tuple_type_members ] ")" .

tuple_type_member = annotations ( type | literal ) .

tuple_type_members = tuple_type_member { "," tuple_type_member } .

tuple_update_expression = expression "." tuple_literal .

type            = identifier
                | tuple_type
                | function_type
                | generic_type .

type_argument   = type
                | generic_type .

type_argument_list  = "[" type_argument { "," type_argument } "]" .

type_declaration = type_declaration_lhs "=" type_declaration_rhs .

type_declaration_lhs = annotations type_identifier [ type_parameters ] .

type_declaration_rhs = "type" tuple_type .

type_identifier = uppercase_letter { letter | decimal_digit | "_" } .

type_parameter  = letter { letter | decimal_digit | "_" } .

type_parameters = "[" type_parameter { "," type_parameter } "]" .

unary_expression = "-" primary_expression | "!" primary_expression | primary_expression .

unicode_escape_sequence = "\\" "u" hex_digit hex_digit hex_digit hex_digit

uppercase_letter = "A"-"Z" .

annotation_value = string_literal | ["-"] number | boolean_literal .
