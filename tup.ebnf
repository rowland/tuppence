add_sub_op      = "+" | "?+" | "-" | "?-" | "|" .

annotation      = namespaced_annotation | simple_annotation .

annotations     = [ annotation { annotation } ] .

annotation_value = string_literal | ["-"] number | boolean_literal .

argument        = expression .

arguments       = argument { "," argument } [ "," ] .

array_literal   = "[" [ array_members | array_literal ] "]"
                | type_identifier "[" [ array_members | array_literal ] "]" .

array_members   = expression { "," expression } [ "," ] .

array_pattern   = "[" pattern { "," pattern } [ "," rest_operator ] "]" .

assignment      = assignment_lhs "=" [ "mut" ] expression .

assignment_lhs  = identifier { "," identifier } [ "," rest_operator ] 
                | "(" labeled_assignment_lhs ")" .

binary_expression = chained_expression

binary_literal  = "0b" ( "0" | "1" ) { "0" | "1" | "_" } .

block           = "{" { statement } expression "}" .

boolean_literal = "true" | "false" .

break_expression = "break" expression .

byte_escape_sequence = "\\" "x" hex_digit hex_digit

case_block      = match_condition block .

chained_expression = prec1_expression { "|>" function_call } .

character       = (* valid UTF-8 codepoint *) .

comment         = "#" { not_eol } eol

condition       = expression .

constant        = literal
                | scoped_identifier
                | identifier .

content_line    = { byte_escape_sequence | unicode_escape_sequence | escape_sequence | interpolation | character - eol - "```" } eol .

decimal_digit   = "0"-"9" .

decimal_literal = decimal_digit { decimal_digit | "_" } .

destructure_pattern = labeled_pattern
                    | tuple_pattern
                    | array_pattern .

dynamic_array   = type_identifier "[" "]".

else_block      = "else" block .

eol             = ( "\r\n" | "\r" | "\n" ) .

error_tuple     = "error" tuple_type .

escape_sequence = ( "\\n" | "\\t" | "\\\"" | "\\'" | "\\\\" | "\\r" | "\\b" | "\\f" | "\\v" | "\\0" | "\\`" ) .

exponent        = "e" [ "-" | "+" ] decimal_digit { decimal_digit } .

export_assignment = assignment_lhs ":" expression .

export_declaration = ( export_type_declaration
                     | export_function_declaration
                     | export_assignment ) .

export_function_declaration = function_declaration_lhs ":" function_type block .

export_function_type_declaration = function_type_declaration_lhs ":" function_type .

export_type_declaration = type_declaration_lhs ":" type_declaration_rhs .

expression      = binary_expression | unary_expression .

fixed_size_array = type_identifier "[" size { "," size } "]" .

float_literal   = decimal_digit { decimal_digit | "_" } "." decimal_digit { decimal_digit | "_" } [ exponent ]
                | decimal_digit { decimal_digit | "_" } exponent .

for_block       = "{" { statement } [ expression ] "}" .

for_expression  = "for" [ for_header | for_in_header ] for_block .

for_header      = initializer [ ";" condition [ ";" step_expression ] ] .

for_in_header   = initializer ";" assignment_lhs "in" iterable .

function_call   = function_identifier "(" [ ( labeled_arguments | arguments [ "," labeled_arguments ] ) [ partial_application ] ] ")" .

function_call_context = function_identifier [ "(" ( labeled_arguments | arguments [ "," labeled_arguments ] ) [ partial_application ] ")" ] .

function_declaration = function_declaration_lhs "=" function_type block .

function_declaration_lhs = function_identifier [ function_parameters ] .

function_identifier = lowercase_letter { letter | decimal_digit | "_" } [ "?" | "!" ] .

function_parameters = "[" [ identifier { "," identifier } ] "]" .

function_type   = ( "fn" | "fx" ) "(" [ labeled_parameters | parameters ] ")" return_type .

function_type_declaration = function_type_declaration_lhs "=" function_type .

function_type_declaration_lhs = function_type_identifier [ function_parameters ] .

function_type_identifier = type_identifier .

generic_type    = type_identifier type_argument_list .

hex_digit       = decimal_digit | "a"-"f" | "A"-"F" .

hexadecimal_literal = "0x" hex_digit { hex_digit | "_" } .

identifier      = ( lowercase_letter | "_" ) { letter | decimal_digit | "_" } .

if_expression   = "if" condition block { "else" "if" condition block } [ else_block ] .

indented_closing = leading_whitespace "```" eol .

indented_line   = leading_whitespace content_line .

index           = expression .

indexed_access  = expression "[" index { "," index } "]" .

initializer     = assignment .

integer_literal = binary_literal
                | hexadecimal_literal
                | octal_literal
                | decimal_literal .

interpolated_string_literal = '"' { byte_escape_sequence | unicode_escape_sequence | escape_sequence | interpolation | character - '"' - eol } '"' .

interpolation   =  "\\(" expression ")"

iterable        = expression .

labeled_argument = identifier ":" expression .

labeled_arguments = labeled_argument { "," ( labeled_argument ) } [ "," ] .

labeled_assignment_lhs = ( identifier | type_identifier ) { "," ( identifier | type_identifier ) } .

labeled_parameter = annotations identifier ":" parameter .

labeled_parameters = labeled_parameter { "," labeled_parameter }  [ "," ] .

labeled_pattern = "(" identifier ":" pattern { "," identifier ":" pattern } ")" .

labeled_tuple_member = identifier ":" tuple_member .

labeled_tuple_members = labeled_tuple_member { "," labeled_tuple_member } [ "," ] .

labeled_tuple_type_member = annotations identifier ":" tuple_type_member .

labeled_tuple_type_members = labeled_tuple_type_member { "," labeled_tuple_type_member } .

leading_whitespace = { " " | "\t" } .

letter          = "a"-"z" | "A"-"Z" .

list_match      = match_element { "," match_element } .

literal         = number
                | boolean_literal
                | string_literal
                | interpolated_string_literal
                | raw_string_literal
                | multi_line_string_literal
                | tuple_literal
                | array_literal .

lowercase_letter = "a"-"z" .

match_condition = list_match
                | pattern_match .

match_element   = constant | range .

member_access   = expression "." ( decimal_literal | identifier ) .

module          = { top_level_item } .

multi_line_string_literal = "```" [ function_call_context ] eol { indented_line } indented_closing .

mul_div_op      = "*" | "?*" | "/" | "?/" | "%" | "&" | "<<" | ">>" .

named_tuple     = type_identifier tuple_type .

namespace       = letter { letter | decimal_digit | "_" } .

namespaced_annotation = "@" namespace ":" identifier annotation_value .

nonzero_digit   = "1"-"9" .

not_eol         = character - "\n" - "\r" .

number          = float_literal | integer_literal .

octal_digit     = "0"-"7" .

octal_literal   = "0o" octal_digit { octal_digit } .

parameter       = annotations ( type | literal ) .

parameters      = parameter { "," parameter } [ "," ] .

partial_application = [ "," ] "*" .

pattern         = labeled_pattern
                | tuple_pattern
                | identifier .

pattern_match   = type_identifier "(" pattern ")" 
                | destructure_pattern
                | type_identifier .

prec1_expression = prec2_expression { "||" prec2_expression } .

prec2_expression = prec3_expression { "&&" prec3_expression } .

prec3_expression = prec4_expression { rel_op prec4_expression } .

prec4_expression = prec5_expression { add_sub_op prec5_expression } .

prec5_expression = prec6_expression { mul_div_op prec6_expression } .

prec6_expression = unary_expression { "^" unary_expression } .

primary_expression = literal
                | "(" expression ")"
                | block
                | if_expression
                | for_expression
                | function_call
                | type_constructor_call
                | return_expression
                | break_expression
                | member_access
                | tuple_update_expression
                | indexed_access
                | identifier .

raw_string_literal = "`" { "``" | unicode_char - "`" } "`" .

rel_op          = "==" | "<" | ">" | "<=" | ">=" | "!=" .

rest_operator   = "..." [ identifier ] .

return_expression = "return" expression .

return_type     = type | "error" | union_with_error | union_declaration_with_error .

simple_annotation = "@" identifier .

size            = decimal_literal | identifier .

statement       = ( type_declaration
                  | function_declaration
                  | assignment
                  | if_expression
                  ) .

step_expression = expression .

string_literal  = '"' { byte_escape_sequence | unicode_escape_sequence | escape_sequence | character - '"' - eol } '"' .

switch_statement = "switch" expression "{" case_block { case_block } [ else_block ] "}" .

top_level_item  = ( assignment
                  | type_declaration
                  | type_alias_declaration
                  | function_declaration
                  | export_declaration
                  ) .

tuple_literal   = "(" [ labeled_tuple_members | tuple_members ] ")" .

tuple_member    = expression

tuple_members   = tuple_member "," { tuple_member "," } [ tuple_member ] .

tuple_pattern   = "(" pattern { "," pattern } ")" .

tuple_type      = "(" [ labeled_tuple_type_members | tuple_type_members ] ")" .

tuple_type_member = annotations ( type | union_type | literal ) .

tuple_type_members = tuple_type_member { "," tuple_type_member } .

tuple_update_expression = expression "." tuple_literal .

type            = type_identifier
                | tuple_type
                | function_type
                | generic_type
                | dynamic_array
                | fixed_size_array
                | error_tuple .

type_alias_declaration = type_identifier "=" member_access .

type_argument   = type
                | generic_type .

type_argument_list  = "[" type_argument { "," type_argument } "]" .

type_constructor_call = type_identifier "(" [ ( labeled_arguments | arguments [ "," labeled_arguments ] ) ] [ partial_application ] ")" .

type_declaration = type_declaration_lhs "=" type_declaration_rhs .

type_declaration_lhs = annotations type_identifier [ type_parameters ] .

type_declaration_rhs = "type" tuple_type
                     | error_tuple
                     | dynamic_array
                     | fixed_size_array
                     | union_type
                     | member_access
                     | type_identifier .

type_identifier = uppercase_letter { letter | decimal_digit | "_" } .

type_parameter  = uppercase_letter { letter | decimal_digit | "_" } .

type_parameters = "[" type_parameter { "," type_parameter } "]" .

unary_expression = "-" valid_negatable_expression
                 | "!" valid_negatable_expression
                 | primary_expression .

unicode_escape_sequence = "\\" "u" hex_digit hex_digit hex_digit hex_digit
                        | "\\" "U" hex_digit hex_digit hex_digit hex_digit hex_digit hex_digit .

union_declaration = "union" "(" eol union_members ")" .

union_declaration_with_error = "union" "(" eol
                             { union_member_declaration eol }
                             [ "error" eol ]
                             ")" .

union_member    = type_identifier
                | generic_type
                | dynamic_array
                | fixed_size_array
                | named_tuple .

union_members   = union_member_declaration { eol union_member_declaration } eol .

union_member_declaration = [ annotations ] named_tuple
                         | union_member_no_annotations .

union_type      = union_member { "|" union_member } .

union_member_no_annotations = type_identifier
                            | generic_type
                            | dynamic_array
                            | fixed_size_array .

union_with_error = union_member { "|" union_member } [ "|" "error" ] .

uppercase_letter = "A"-"Z" .

valid_negatable_expression = literal
                           | "(" expression ")"
                           | block
                           | function_call
                           | member_access
                           | tuple_update_expression
                           | indexed_access
                           | identifier .
