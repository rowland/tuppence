add_sub_op = "+" | "?+" | "-" | "?-" | "|" .

annotation = namespaced_annotation | simple_annotation .

annotations = [ annotation { annotation } ] .

annotation_value = string_literal | ["-"] number | boolean_literal | type_reference .

argument = ( expression | spread_argument ) .

arguments = argument { "," argument } [ "," ] .

array_function_call = "array" "(" type_identifier "," expression ")" .

array_literal = "[" [ array_members | array_literal ] "]"
              | type_identifier "[" [ array_members | array_literal ] "]" .

array_members = expression { "," expression } [ "," ] .

array_pattern = "[" pattern { "," pattern } [ "," rest_operator ] "]" .

assignment = assignment_lhs "=" [ "mut" ] expression .

assignment_lhs = identifier { "," identifier } [ "," rest_operator ] 
               | "(" labeled_assignment_lhs ")" .

binary_expression = chained_expression

binary_literal = "0b" ( "0" | "1" ) { "0" | "1" | "_" } .

block = "{" block_body "}" .

block_body = { statement } expression .

block_parameters = "|" assignment_lhs "|" .

boolean_literal = "true" | "false" .

break_expression = "break" expression .

byte_escape_sequence = "\\" "x" hex_digit hex_digit

case_block = match_condition block .

chained_expression = prec1_expression { "|>" function_call } .

character = (* valid UTF-8 codepoint *) .

comment = "#" { not_eol } eol

condition = expression .

constant = literal
         | scoped_identifier
         | identifier .

content_line = { byte_escape_sequence | unicode_escape_sequence | escape_sequence | interpolation | character - eol - "```" } eol .

contract_declaration = "contract" "(" eol contract_members ")" .

contract_members = contract_member_declaration { eol contract_member_declaration } eol .

contract_member_declaration = annotations function_declaration_lhs "=" function_type .

decimal_digit = "0"-"9" .

decimal_literal = decimal_digit { decimal_digit | "_" } .

destructure_pattern = labeled_pattern
                    | tuple_pattern
                    | array_pattern .

dynamic_array = "[" "]" type_identifier .

else_block = "else" block .

enum_declaration = "enum" "(" eol enum_members ")" .

enum_members = enum_member_declaration { eol enum_member_declaration } eol .

enum_member_declaration = annotations identifier [ "=" integer_literal ] .

eol = ( "\r\n" | "\r" | "\n" ) .

error_tuple = "error" tuple_type .

escape_sequence = ( "\\n" | "\\t" | "\\\"" | "\\'" | "\\\\" | "\\r" | "\\b" | "\\f" | "\\v" | "\\0" | "\\`" ) .

exponent = "e" [ "-" | "+" ] decimal_digit { decimal_digit } .

export_assignment = assignment_lhs ":" expression .

export_declaration = ( export_type_qualified_function_declaration
                     | export_type_qualified_declaration
                     | export_type_declaration
                     | export_function_declaration
                     | export_assignment ) .

export_function_declaration = function_declaration_lhs ":" function_declaration_type block .

export_function_type_declaration = function_type_declaration_lhs ":" function_type .

export_type_declaration = type_declaration_lhs ":" type_declaration_rhs .

export_type_qualified_declaration = type_identifier "." identifier ":" expression .

export_type_qualified_function_declaration = type_identifier "." function_declaration_lhs ":" function_declaration_type block .

expression = try_expression
           | binary_expression
           | unary_expression .

fixed_size_array = "[" size { "," size } "]" type_identifier .

float_literal = decimal_digit { decimal_digit | "_" } "." decimal_digit { decimal_digit | "_" } [ exponent ]
              | decimal_digit { decimal_digit | "_" } exponent .

for_block = "{" { statement } [ expression ] "}" .

for_expression = "for" [ for_header | for_in_header ] for_block .

for_header = initializer [ ";" condition [ ";" step_expression ] ] .

for_in_header = ( initializer ";" assignment_lhs "in" iterable [ ";" step_expression ] )
              | ( assignment_lhs "in" iterable ) .

iterable = expression .

function_arguments = ( labeled_arguments
                     | arguments [ "," labeled_arguments ] 
                     ) [ partial_application ] .

function_block = "{" [ block_parameters ] block_body "}" .

function_call = function_identifier [ function_parameter_types ] "(" [ function_arguments ] ")" [ function_block ] .

function_call_context = function_identifier [ "(" ( labeled_arguments | arguments [ "," labeled_arguments ] ) [ partial_application ] ")" ] .

function_declaration = function_declaration_lhs "=" function_declaration_type block .

function_declaration_type = ( "fn" "(" [ labeled_parameters | parameters ] ")" ( return_type | "_" ) )
                          | ( "fx" "(" [ labeled_parameters | parameters ] ")" [ return_type | "_" ] ) .

function_declaration_lhs = function_identifier [ function_parameter_types ] .

function_identifier = lowercase_letter { letter | decimal_digit | "_" } [ "?" | "!" ] .

function_parameter_types = "[" [ local_type_reference { "," local_type_reference } ] "]" .

function_type = ( "fn" | "fx" ) "(" [ labeled_parameters | parameters ] ")" return_type .

function_type_declaration = function_type_declaration_lhs "=" function_type .

function_type_declaration_lhs = function_type_identifier [ function_parameter_types ] .

function_type_identifier = type_identifier .

generic_type = type_identifier type_argument_list .

hex_digit = decimal_digit | "a"-"f" | "A"-"F" .

hexadecimal_literal = "0x" hex_digit { hex_digit | "_" } .

identifier = ( lowercase_letter | "_" ) { letter | decimal_digit | "_" } .

if_expression = "if" condition block { "else" "if" condition block } [ else_block ] .

import_expression = "import" "(" string_literal ")" .

indented_closing = leading_whitespace "```" eol .

indented_line = leading_whitespace content_line .

index = expression .

indexed_access = expression "[" index { "," index } "]" .

initializer = assignment .

inline_union = "(" union_type ")" .

integer_literal = binary_literal
                | hexadecimal_literal
                | octal_literal
                | decimal_literal .

interpolated_string_literal = '"' { byte_escape_sequence | unicode_escape_sequence | escape_sequence | interpolation | character - '"' - eol } '"' .

interpolation = "\\(" expression ")"

iterable = expression .

iterable_header = assignment_lhs "in" iterable .

labeled_argument = ( identifier ":" expression | spread_argument ) .

labeled_arguments = labeled_argument { "," ( labeled_argument ) } [ "," ] .

labeled_assignment_lhs = ( rename_identifier | rename_type ) { "," ( rename_identifier | rename_type ) } .

labeled_parameter = annotations identifier ":" ( nilable_type
                                               | type
                                               | literal
                                               | union_type
                                               | union_declaration ) .

labeled_parameters = ( labeled_parameter | labeled_rest_parameter ) { "," ( labeled_parameter | labeled_rest_parameter ) } [ "," ] .

labeled_pattern = "(" identifier ":" pattern { "," identifier ":" pattern } ")" .

labeled_rest_parameter = annotations identifier ":" rest_parameter .

labeled_tuple_member = identifier ":" tuple_member .

labeled_tuple_members = labeled_tuple_member { "," labeled_tuple_member } [ "," ] .

labeled_tuple_type_member = annotations identifier ":" tuple_type_member .

labeled_tuple_type_members = labeled_tuple_type_member { "," labeled_tuple_type_member } .

leading_whitespace = { " " | "\t" } .

letter = "a"-"z" | "A"-"Z" .

list_match = match_element { "," match_element } .

literal = number
        | boolean_literal
        | string_literal
        | interpolated_string_literal
        | raw_string_literal
        | multi_line_string_literal
        | tuple_literal
        | array_literal
        | symbol_literal
        | rune_literal .

local_type_reference = type_identifier | identifier .

lowercase_letter = "a"-"z" .

match_condition = list_match
                | pattern_match .

match_element = constant | range .

member_access = ( expression | type_identifier ) "." ( decimal_literal 
                                                     | identifier 
                                                     | function_call ) .

module = { top_level_item } .

multi_line_string_literal = "```" [ function_call_context ] eol { indented_line } indented_closing .

mul_div_op = "*" | "?*" | "/" | "?/" | "%" | "&" | "<<" | ">>" .

named_tuple = type_identifier tuple_type .

namespace = letter { letter | decimal_digit | "_" } .

namespaced_annotation = "@" namespace ":" identifier annotation_value .

nilable_type = "?" local_type_reference .

nonzero_digit = "1"-"9" .

not_eol = character - "\n" - "\r" .

number = float_literal | integer_literal .

octal_digit = "0"-"7" .

octal_literal = "0o" octal_digit { octal_digit } .

parameter = annotations ( nilable_type
                        | type
                        | literal
                        | union_type 
                        | union_declaration ) .

parameters = ( parameter | rest_parameter ) { "," ( parameter | rest_parameter ) } [ "," ] .

partial_application = [ "," ] "*" .

pattern = labeled_pattern
        | tuple_pattern
        | identifier .

pattern_match = type_identifier "(" pattern ")" 
              | destructure_pattern
              | type_identifier .

prec1_expression = prec2_expression { "||" prec2_expression } .

prec2_expression = prec3_expression { "&&" prec3_expression } .

prec3_expression = prec4_expression { rel_op prec4_expression } .

prec4_expression = prec5_expression { add_sub_op prec5_expression } .

prec5_expression = prec6_expression { mul_div_op prec6_expression } .

prec6_expression = unary_expression { "^" unary_expression } .

primary_expression = "(" expression ")"
                   | block
                   | if_expression
                   | for_expression
                   | array_function_call
                   | function_call
                   | import_expression
                   | type_constructor_call
                   | return_expression
                   | break_expression
                   | member_access
                   | tuple_update_expression
                   | indexed_access
                   | range
                   | identifier
                   | literal .

range = range_bound ".." range_bound .

range_bound = "(" expression ")"
            | member_access
            | indexed_access
            | identifier
            | literal .

raw_string_literal = "`" { "``" | character - "`" } "`" .

rel_op = "==" | "<" | ">" | "<=" | ">=" | "!=" .

rename_identifier = identifier [ ":" identifier ] .

rename_type = type_identifier [ ":" type_identifier ] .

rest_operator = "..." [ identifier ] .

rest_parameter = "..." type .

return_expression = "return" expression .

return_type = union_with_error
            | union_declaration_with_error
            | nilable_type
            | type
            | "error" .

rune_literal = "'" ( byte_escape_sequence | unicode_escape_sequence | escape_sequence | character - eol ) "'" .

simple_annotation = "@" identifier .

size = decimal_literal | identifier .

spread_argument = "..." expression .

statement = ( type_qualified_function_declaration
            | type_qualified_declaration
            | type_declaration
            | function_declaration
            | assignment
            | expression
            ) .

step_expression = expression .

string_literal = '"' { byte_escape_sequence | unicode_escape_sequence | escape_sequence | character - '"' - eol } '"' .

switch_statement = "switch" expression "{" case_block { case_block } [ else_block ] "}" .

symbol_literal = ":" identifier .

top_level_item = ( type_qualified_function_declaration
                 | type_qualified_declaration
                 | type_declaration
                 | function_declaration
                 | assignment
                 | export_declaration
                 ) .

try_expression = "try" expression
               | "try_continue" [ expression ]
               | "try_break" [ expression ] .

tuple_literal = "(" [ labeled_tuple_members | tuple_members ] ")" .

tuple_member = expression

tuple_members = tuple_member "," { tuple_member "," } [ tuple_member ] .

tuple_pattern = "(" pattern { "," pattern } ")" .

tuple_type = "(" [ labeled_tuple_type_members | tuple_type_members ] ")" .

tuple_type_member = annotations ( nilable_type
                                | type
                                | union_type
                                | union_declaration
                                | literal ) .

tuple_type_members = tuple_type_member { "," tuple_type_member } .

tuple_update_expression = expression "." tuple_literal .

type = fixed_size_array
     | dynamic_array
     | function_type
     | error_tuple
     | tuple_type
     | generic_type
     | local_type_reference
     | inline_union .

type_argument = type
              | generic_type .

type_argument_list = "[" type_argument { "," type_argument } "]" .

type_constructor_call = type_identifier [ function_parameter_types ] "(" [ function_arguments ] ")" [ function_block ] .

type_declaration = type_declaration_lhs "=" type_declaration_rhs .

type_declaration_lhs = annotations type_identifier [ type_parameters ] .

type_declaration_rhs = nilable_type
                     | "type" tuple_type
                     | error_tuple
                     | dynamic_array
                     | fixed_size_array
                     | union_type
                     | union_declaration
                     | enum_declaration
                     | contract_declaration
                     | type_reference
                     | type_identifier .

type_identifier = uppercase_letter { letter | decimal_digit | "_" } .

type_parameter = uppercase_letter { letter | decimal_digit | "_" } .

type_parameters = "[" type_parameter { "," type_parameter } "]" .

type_qualified_declaration = type_identifier "." identifier "=" expression .

type_qualified_function_declaration = type_identifier "." function_declaration_lhs "=" function_declaration_type block .

type_reference = identifier "." type_identifier .

unary_expression = ( "-" | "!" | "~" ) valid_negatable_expression
                 | primary_expression .

unicode_escape_sequence = "\\" "u" hex_digit hex_digit hex_digit hex_digit
                        | "\\" "U" hex_digit hex_digit hex_digit hex_digit hex_digit hex_digit .

union_declaration = "union" "(" eol union_members ")" .

union_declaration_with_error = "union" "(" eol
                             { union_member_declaration eol }
                             [ "error" eol ]
                             ")" .

union_member = local_type_reference
             | generic_type
             | dynamic_array
             | fixed_size_array
             | named_tuple
             | contract_declaration .

union_members = union_member_declaration { eol union_member_declaration } eol .

union_member_declaration = annotations named_tuple
                         | union_member_no_annotations .

union_type = "any" | ( union_member { "|" union_member } ) .

union_member_no_annotations = type_identifier
                            | generic_type
                            | dynamic_array
                            | fixed_size_array .

union_with_error = ( "!" union_member ) 
                 | ( union_member { "|" union_member } [ "|" "error" ] ) .

uppercase_letter = "A"-"Z" .

valid_negatable_expression = literal
                           | "(" expression ")"
                           | block
                           | function_call
                           | member_access
                           | tuple_update_expression
                           | indexed_access
                           | identifier .
