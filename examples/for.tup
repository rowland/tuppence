# simple, infinite loop, effectively
#   for condition = true; true; true {}
# the value of the for loop is determined by any break statements
#   (in this case nil)
for {
    v = input()
    if v == "exit" { break nil }
    else if v.whitespace?() { continue }
}

# infinite loop with initializer, effectively
#   for i = 0; true; <block value>
# i takes the value of the block for successive iterations
# it is an error for the block to have no final expression
# the type and value of the for loop is determined by any break statements
#   (in this case 10)
for i = 0 {
    if !(i < 10) { break i }
    i + 1
}

# loop with initializer and condition, effectively
#   for i = 0; i < 10; <block value>
# i takes the value of the block for successive iterations
# it is an error for the block to have no final expression
# the type and value of the for loop is determined by
#   the initial or final expression
#   and any break statements
#   (in this case 10)
for i = 0; i < 10 {
    i + 1
}

# loop with initializer, condition and step expression
# the step expression becomes the last line of the block
# and the new value of i
# the type and value of the for loop is determined by
#   the initial or step expression
#   and any break statements
#   (in this case 10)
for i = 0; i < 10; i + 1 {}

# infinite loop with tuple initializer, effectively
#   for (acc, i) = (0, 1); true; <block value>
# (acc, i) takes the value of the block for successive iterations
# it is an error for the block to have no final expression
# or for the final expression to not match the shape of the initializer
# the type and value of the for loop is determined by any break statements
# in this case the sum of the integers 1..10
sum, _ = for (acc, i) = (0, 1) {
    if i > 10 { break acc }
    (acc + i, i + 1)
}

# non-infinite loop defaults to initial value
result = for i = 0; i < 0; i + 1 {}
# result == 0

# loop with tuple initializer and condition, effectively
#   for (acc, i) = (0, 1); i <= 10; <block value>
# (acc, i) takes the value of the block for successive iterations
# it is an error for the block to have no final expression
# or for the final expression to not match the shape of the initializer
# the type and value of the for loop is determined by
#   the initial or final expression
#   and any break statements
# in this case the sum of the integers 1..10
sum, _ = for (acc, i) = (0, 1); i <= 10 {
    (acc + i, i + 1)
}

# loop with tuple initializer, condition and step expression
# note that parens around initial tuple are optional
# the step expression becomes the last line of the block
# and the new value of the initialized tuple
# the type and value of the for loop is determined by
    # the initial or final expression
    # the step expression
    # and any break statements
sum, _ = for acc, i = (0, 1); i <= 10; (acc + i, i + 1) {}

# for each loop with simple initializer
some_ary = [1, 2, 3]
sum = for acc = 0; i in some_ary { acc + i }

# for each loop with tuple initializer
some_ary = [1, 2, 3]
sum, product = for acc, prod = (0, 1); i in some_ary {
    (acc + i, prod * i)
}

# zip two arrays
ary_a = [1, 2, 3]
ary_b = [4, 5, 6, 7]
zipped = for acc = []; a, b in (ary_a, ary_b) { acc << (a, b) }
# [(1,4), (2, 5), (3, 6)]

# number some words
words = mut ["fee", "fie", "foe", "fum"]
words, _ = for acc, n = ([], 1); w in words {
    (acc << "\(n). \(w)", n + 1)
}
# ["1. fee", "2. fie", "3. foe", "4. fum"]
