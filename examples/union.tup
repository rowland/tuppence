# union of existing types
Key = Int | String

# unions can include arrays and errors
Data = []Byte
HttpError = error (code: Int, message: String)
Result = Data | HttpError

# a union can introduce a new type
ComplexKey = Int | String | ComplexTuple (primary: Int, secondary: String)

# a generic union type
Bar[a] = type(a)
Baz[a] = type(a)
Foo[a] = Bar[a] | Baz[a]

# a generic union that introduces new types
Result[a] = union(
    @true
    Ok()
    @false
    Err(a)
)

# A union of a union and a type or of two unions is flattened, e.g.
Intish = Int32 | Int64
Floatish = Float32 | Float64
Number = Intish | Floatish # equivalent to Int32 | Int64 | Float32 | Float64

# The intersection of functions having a union's members as the first parameter type
# will be available for dispatch on a value of that union.

Cat = type(name: String)
string[Cat] = fn(cat: Cat) String { "I am a cat named \(cat.name)." }

Dog = type(name: String)
string[Dog] = fn(dog: Dog) String { "I am a dog named \(dog.name)." }

Animal = Cat | Dog

describe = fn(animal: Animal) {
    print(animal.string())
}

dog = Dog("Spot")
describe(dog)

# Compiler provides:
string[Animal] = fn(Animal) String {
    arg0, ...rest = it
    switch arg0 {
        Cat { it.string(...rest) }
        Dog { it.string(...rest) }
    }
}
